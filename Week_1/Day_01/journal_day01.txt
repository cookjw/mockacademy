So it begins!

Our tasks for the first "day" of Mockacademy, adopted from [Zack] and [Julie](http://julieatappacademy.tumblr.com/post/67439091665/week-1-day-1)'s blogs,
are:

- the Python analogue of monkeypatching Ruby's Array type, adding specifically:
-- the "uniq" method, which eliminates duplicate elements of an array;
- a function that converts a number to another base;
- an implementation of the Set data type;
- a playable Towers of Hanoi game
- a function that accepts an integer and returns its name in words
(so e.g. 259123 becomes "two hundred fifty nine thousand one hundred twenty three")


Monkeypatching the list type?
------------------------------

A recurring theme of this course will be the differences between Python
and Ruby. Our very first topic provides an example. 

In Ruby, you're allowed to take built-in data types
and add your own new methods to them. This is called "monkeypatching". 
For example, suppose you'd like a method to sum the squares of the 
elements of a Ruby array (at least when the elements are numbers).
You can just open up the Array class and add it:

/// Ruby ///

class Array

  def sum_squares
    sum = 0
    for number in self
      sum += number*number      
    end
    return sum    
  end

///

You can then do:

/// Interactive Interpreter (Ruby) ///

irb(main):016:0> [1,2,3].sum_squares
=> 14

///


You can't do this in Python, unfortunately. If you try to "open up" 
a built-in class, you'll just end up creating a new class with the
same name:

/// Interactive Interpreter (Python) ///

Python 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> isinstance([1,2,3], list)
True
>>> class list:
...     pass
...
>>> isinstance([1,2,3], list)
False

///

The closest thing we can do, as we're told on [Stack Overflow](http://stackoverflow.com/a/193660), 
is to inherit from the class in question:

/// Python ///

class Array(list):
     def __new__(cls, values): 
         return list.__new__(cls, values)
     
     def sum_squares(self):
         sum = 0
         for number in self:
             sum += number*number
         return sum
        

///

(See https://www.python.org/download/releases/2.2/descrintro/#__new__ 
for explanation of the __new__ method. The point here is that it allows
us to make an instance of our new Array class by passing in a Python
list, as in x = Array([1,2,3]).)

This lets you do:

/// Interactive Interpreter (Python) ///

>>> x = Array([1,2,3])
>>> x
[1, 2, 3]
>>> x.sum_squares()
14

///

Of course, in real life, one would probably just prefer to define an
ordinary 'outside' function sum_squares(my_list), as opposed to a method
of the relevant class. Cf. Python's built-in sum(my_list), max(my_list), 
etc. In Ruby, habits are different.

Uniqness
----------

With that in mind, let's implement the functionality of Ruby's uniq
method on arrays, which eliminates duplicate elements. 

/// Python: uniq.py ///

def uniq(my_list):
    for item in my_list:
        while my_list.count(item) > 1:
            first_index = my_list.index(item)
            second_index = my_list.index(item, first_index+1)
            del my_list[second_index]
    return my_list
    

///

Testing:

/// Interactive Interpreter (Python) ///

Python 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from uniq import uniq
>>> uniq([1,2,3,4,5,5,5,6,7,2])
[1, 2, 3, 4, 5, 6, 7]
>>> uniq([])
[]
>>> uniq([1,2,3])
[1, 2, 3]
>>> uniq([1,2,1,4])
[1, 2, 4]
>>>

///

All Your Base
-------------

Next, we'll implement [base] conversion of numbers. According to 
[Julie](), the name of her method for doing this in Ruby was
num_to_s. Anyone familiar with Ruby will recognize "to_s" as the method
that converts to a string, e.g.

/// Interactive Interpreter (Ruby) ///

irb(main):001:0> 123.to_s
=> "123"

/// 

What the same "num_to_s" suggests, therefore, is that the output of our
base-conversion function should be in string form. (I don't actually know
whether this was the intention behind the name; "s" could just be a 
variable representing the target base for all I know. But string 
representation of the output seems appropriate in any case.)



/// Python: base.py ///

from string import ascii_uppercase

def digit(number):
    """
    Converts number to 'digit', i.e. appropriate single-character 
    string ('0' through '9', or 'A' through 'Z' for bases > 10)
    """
    if 0 <= number <= 9:
        return str(number)
    elif 10 <= number < 36:
        return ascii_uppercase[number - 10]
    else:
        raise Exception("Wrong kind of input for digit function")
        
def highest_power(number, base):
    """
    Returns highest power of base that is <= number
    (i.e., the floor function of the logarithm of number to base base)
    """
    exponent = 0
    while base**(exponent) <= number:
        exponent += 1
    return exponent - 1
    

def convert_base(number, base):
    """
    Converts number (integer) to string representation in new base
    """
    result = ""
    n = highest_power(number, base)
    x = number
    while n >= 0:
        quotient = x // base**n # Integer division, even in Python 3!
        remainder = x % base**n
        place_value = digit(quotient)
        result += place_value
        x = remainder
        n -= 1
    return result

///


In action:

/// Interactive Interpreter (Python) ///

Python 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> from base import convert_base
>>> convert_base(2, 2)
'10'
>>> convert_base(144, 12)
'100'
>>> convert_base(144, 23)
'66'
>>> convert_base(144, 29)
'4S'
>>> convert_base(11, 12)
'B'

///

[Babbitt](http://en.wikipedia.org/wiki/All_Set_%28Babbitt%29) would be proud
---------------------------------------------------------------------------

Python comes equipped with a set data type, but in this section we'll
reimplement it ourselves, learning some CS tricks along the way.


